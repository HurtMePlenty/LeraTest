import org.gradle.tooling.BuildLauncher
import org.gradle.tooling.GradleConnector
import org.gradle.tooling.ProjectConnection
import org.gradle.tooling.model.build.BuildEnvironment

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.bmuschko.tomcat'



repositories {

    mavenCentral()
}


buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.2.2'
    }
}

dependencies {

    def tomcatVersion = '8.0.27'

    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",

            "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"


    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.10'
    compile group: 'org.springframework', name: 'spring-webmvc', version: '5.0.5.RELEASE'
    compile group: 'javax.servlet', name: 'jstl', version: '1.2'
    compile group: 'javax.validation', name: 'validation-api', version: '2.0.0.Final'
    compile group: 'org.springframework.data', name: 'spring-data-mongodb', version: '2.0.6.RELEASE'
    compile group: 'org.mongodb', name: 'mongo-java-driver', version: '3.5.0'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile group: 'com.vaadin.external.google', name: 'android-json', version: '0.0.20131108.vaadin1'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.springframework', name: 'spring-test', version: '5.0.5.RELEASE'
    testCompile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
}


tomcat {
    contextPath = '/'
}

task tomcatDebug {
    // Create a new task tomcatDebug, add a description and add it to the same group as tomcatRun
    description "Starting Tomcat with debugger enabled on port 5008."
    group "web application"
}

tomcatDebug.doLast {

    ProjectConnection conn = GradleConnector.newConnector()
            .forProjectDirectory(new File("."))
            .connect();

    try {

        BuildEnvironment env = conn.getModel(BuildEnvironment.class)
        BuildLauncher build = conn.newBuild();

        build.setStandardOutput(System.out)
        build.setStandardError(System.out)

        build.forTasks("tomcatRun")
        // Enable debug via jvm arguments and append JVM arguments of the currently running vm (except -D).
        build.setJvmArguments("-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5008", *env.java.jvmArguments)

        // Run tomcatRun in the new JVM with debug parameters
        build.run()

    } finally {
        conn.close();
    }
}